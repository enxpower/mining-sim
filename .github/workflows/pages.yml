name: Build & Deploy Pages (private engine required)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

# 根据你的实际情况改动这四个值（若组织/仓库名不同）
env:
  ENGINE_OWNER: enxpower            # ← 你的组织/账号
  ENGINE_REPO: ems-engine           # ← 私库名
  ENGINE_TAG:  latest               # ← 私库 release 的 tag（建议 latest 或 vX.Y.Z）
  ENGINE_ASSET: ems-engine.min.js   # ← release 里的构建产物文件名（必须匹配）

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 将 src/ 复制到 public/src/（页面中用 ./src/*.js）
      - name: Bundle src into public/src
        run: |
          mkdir -p public/src
          rsync -a --delete src/ public/src/ || true

      - name: Ensure vendor dir
        run: mkdir -p public/vendor

      # 🔐 校验 Token 存在（必须有 ENGINE_READ_TOKEN，否则直接失败）
      - name: Verify secret is present
        run: |
          if [ -z "${{ secrets.ENGINE_READ_TOKEN }}" ]; then
            echo "❌ Missing repository secret ENGINE_READ_TOKEN"
            exit 2
          fi
          echo "✅ ENGINE_READ_TOKEN is present (value hidden)"

      # ⬇️ 强制下载私库引擎；失败即 fail，确保线上一定使用理论引擎
      - name: Download private engine (MUST SUCCEED)
        env:
          GH_TOKEN: ${{ secrets.ENGINE_READ_TOKEN }}
        run: |
          set -euo pipefail
          echo "==> Fetching ${ENGINE_OWNER}/${ENGINE_REPO} release: ${ENGINE_TAG}"
          gh release view "${ENGINE_TAG}" --repo "${ENGINE_OWNER}/${ENGINE_REPO}"

          echo "==> Downloading asset: ${ENGINE_ASSET}"
          gh release download "${ENGINE_TAG}" \
            --repo "${ENGINE_OWNER}/${ENGINE_REPO}" \
            --pattern "${ENGINE_ASSET}" \
            --dir "public/vendor"

          echo "==> Verifying asset exists"
          test -s "public/vendor/${ENGINE_ASSET}" || (echo "❌ ${ENGINE_ASSET} not found or empty"; exit 66)
          ls -lh public/vendor

      # 配置 & 上传静态站点（public 目录）
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact (public)
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
